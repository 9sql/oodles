/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'scala'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
	compile 'org.scala-lang:scala-library:2.11.7'
    testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.3'
    // https://mvnrepository.com/artifact/org.gradle/gradle-tooling-api
	compile group: 'org.gradle', name: 'gradle-tooling-api', version: '2.1'
}


sourceSets {
    test {
        scala {
            srcDir 'src/test/java'
        }
    }
}

def greaterThanZero(name,value) {
	if(Integer.parseInt(value) <= 0)
	{
			throw new GradleException(name+ " should be greater than zero.")
	}
}

def nonNegetive(name,value){
	
	if(Integer.parseInt(value)<0)
	{
			throw new GradleException(name+ " should not be less than zero.")
	}
}

def checkProperty(name){
	if(!project.hasProperty(name)){
					throw new GradleException("Parameter missing:- "+name)
	}
}


//Task Run all Gatling Tests
task gatling (dependsOn: 'compileTestScala') <<{

    def absPath = System.getProperty("user.dir");
    // target/test-classes is required by gatling to be run
    def targetTestClassesFolder = new File(absPath, 'target/test-classes')
    targetTestClassesFolder.mkdirs()
    // create build/reports folder
    def targetReportsFolder = new File(project.buildDir.absolutePath, '/reports')
    targetReportsFolder.mkdirs()
    logger.lifecycle(" ---- Executing all Gatling Simulations from: ${sourceSets.test.output.classesDir} ----")
    
    
    // arguments needed for test-runs 
    
    def _noOfUsers = -1
    def _rampUpUsers = -1  
    def _rampUpUsersTo = 0
    def _rampUpTime = -1 
    def _constantUsers=-1
    def _constantUsersDuration=-1
    def _constantUsersRandomized = ""
    def _envUrl = ""
    def _apiUrl =""
    def _reqAuth=""
    def _testToRun = null
    def _singleRun = null
    def _reqType =""
    def _bodyJson = ""
    def _reportPath=""
    
    
	if(project.hasProperty("users")){
		_noOfUsers=users
	}
	if(project.hasProperty("rampupUsers") || project.hasProperty("rampupTime") ){
			project.checkProperty("rampupUsers")
			project.checkProperty("rampupTime")
			nonNegetive("rampupTime ",rampupTime)
			greaterThanZero("rampupUsers ",rampupUsers)
			_rampUpUsers=rampupUsers
			_rampUpTime=rampupTime
			if(project.hasProperty("rampUpUsersTo"))
			{
				_rampUpUsersTo =rampUpUsersTo
			}
	}
	if(project.hasProperty("testToRun"))
	{
		_testToRun = testToRun
		_singleRun = true
	}
	
	if(project.hasProperty("constantUsers"))
	{
		if(project.hasProperty("constantUsersDuration"))
		{
			greaterThanZero("Number of constant users ",constantUsersDuration)
			_constantUsers = constantUsers;
			_constantUsersDuration = constantUsersDuration
		}
		else
		{
			throw new GradleException( "Parameter constantUsersDuration argument is required while using constant users.")
		}
		
		if(project.hasProperty("useRandomization"))
		{
			_constantUsersRandomized = useRandomization
		}
	}
	
	if(project.hasProperty("envUrl"))
	{
		_envUrl = envUrl
	}		
    
    if(project.hasProperty("apiUrl"))
	{
		_apiUrl = apiUrl
	}
	
    if(project.hasProperty("reportPath"))
    {
    	_reportPath=reportPath
    }
    
    else
    {
    	_reportPath=project.buildDir.absolutePath + '/report/'
    }
    
    sourceSets.test.output.classesDir.eachFileRecurse { file ->
        if (file.isFile()) {

            def gatlingScenarioClass = (file.getPath() - (sourceSets.test.output.classesDir.getPath() + File.separator) - '.class')
                    .replace(File.separator, '.')
            def foundGatlingSim = -1
            if(_singleRun)
            {
            	foundGatlingSim = gatlingScenarioClass.lastIndexOf(_testToRun);
            }
            else
            {
            	foundGatlingSim = gatlingScenarioClass.lastIndexOf("Simulation");
            }
          //  if (foundGatlingSim > 0) {
            //    javaexec {
            //        main = 'io.gatling.app.Gatling'
             //       classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
             //       classpath+=sourceSets.test.resources
             //       args '-sf', sourceSets.test.output.classesDir,
             //               '-s', gatlingScenarioClass,
             //               '-rf',_reportPath
             //       systemProperties = ['users': _noOfUsers, 'rampUpUsers': _rampUpUsers,'rampUpTime':_rampUpTime,'envUrl':_envUrl,'apiUrl':_apiUrl,'constantUsers':_constantUsers,'constantUsersDuration':_constantUsersDuration,'randomize':_constantUsersRandomized,'rampUpUsersTo':_rampUpUsersTo]
                    

               // }
           // }
        }
    }
    logger.lifecycle(" ---- Done executing all Gatling scenarios ----")
}

build.doLast{

	tasks.gatling.execute()
} 


